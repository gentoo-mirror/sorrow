--- a/i3ipc/connection.py	2019-08-27 01:17:46.352460379 +1000
+++ b/i3ipc/connection.py	2019-08-27 01:19:29.967857744 +1000
@@ -14,8 +14,6 @@
 import os
 from threading import Timer, Lock
 import time
-import Xlib
-import Xlib.display
 
 
 class Connection:
@@ -56,15 +54,6 @@
             socket_path = os.environ.get("SWAYSOCK")
 
         if not socket_path:
-            try:
-                disp = Xlib.display.Display()
-                root = disp.screen().root
-                i3atom = disp.intern_atom("I3_SOCKET_PATH")
-                socket_path = root.get_full_property(i3atom, Xlib.X.AnyPropertyType).value.decode()
-            except Exception:
-                pass
-
-        if not socket_path:
             raise Exception('Failed to retrieve the i3 or sway IPC socket path')
 
         if auto_reconnect:
--- a/i3ipc/aio/connection.py	2019-08-27 19:49:01.411172371 +1000
+++ b/i3ipc/aio/connection.py	2019-08-27 19:50:59.169564132 +1000
@@ -7,8 +7,6 @@
 import os
 import json
 from typing import Optional, List, Tuple, Callable, Union
-from Xlib import display, X
-from Xlib.error import DisplayError
 import struct
 import socket
 
@@ -182,17 +180,6 @@
     if exists(socket_path):
         return socket_path
 
-    # next try the root window property
-    try:
-        d = display.Display()
-        atom = d.get_atom('I3_SOCKET_PATH')
-        root = d.screen().root
-        prop = root.get_full_property(atom, X.AnyPropertyType)
-        if prop and prop.value:
-            socket_path = prop.value.decode()
-    except DisplayError:
-        pass
-
     if exists(socket_path):
         return socket_path
 
